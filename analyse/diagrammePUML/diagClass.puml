@startuml
title Diagramme de classes

class Main {
  + main(args: String[]): void
  + loadImage(path: String): BufferedImage
  + saveImage(img: BufferedImage, path: String): void
}

class ImageUtils {
  + noising(X0: BufferedImage, sigma: double): BufferedImage
  + extractPatches(X: BufferedImage, s: int): PatchSet
  + reconstructPatches(p: PatchSet, width: int, height: int): BufferedImage
  + decoupeImage(X: BufferedImage, W: int, n: int): List<ImageZone>
}

class Patch {
  - data: double[][]
  - positionX: int
  - positionY: int
  + toVector(): double[]
  + fromVector(v: double[]): Patch
}

class PatchSet {
  - patchs: List<Patch>
  - origine: String
  + getPatchs(): List<Patch>
  + taille(): int
}

class ACP {
  + mean(V: List<double[]>): double[]
  + covariance(V: List<double[]>): double[][]
  + computeACP(V: List<double[]>): double[][]
  + project(U: double[][], Vc: List<double[]>): double[][]
}

class Thresholding {
  + seuilVisu(sigma: double, size: int): double
  + seuilBayes(sigma: double, sigmaSignal: double): double
  + hard(lambda: double, x: double): double
  + soft(lambda: double, x: double): double
}

class Evaluation {
  + mse(X1: BufferedImage, X2: BufferedImage): double
  + psnr(X1: BufferedImage, mse: double): double
}

class ImageZone {
  - image: BufferedImage
  - x: int
  - y: int
  + getImage(): BufferedImage
  + getPosition(): (int, int)
}

class Interface {
  + afficherImage(img: BufferedImage)
  + afficherResultats(mse: double, psnr: double, gain: double)
  + récupérerParamètres(): Parametre
  + appliquerDébruitage(): void
}

class Parametre {
  + sigma: double
  + taillePatch: int
  + modeExtraction: String
  + typeSeuillage: String
  + tailleZone: int
}

class ImageData {
  + originale: BufferedImage
  + bruitée: BufferedImage
  + reconstruite: BufferedImage
  + nom: String
}

' Relations
Main --> Interface
Main --> ImageUtils
Main --> ACP
Main --> Thresholding
Main --> Evaluation

Interface --> Parametre
Interface --> Main : utiliser()

ImageUtils --> Patch
ImageUtils --> PatchSet
ImageUtils --> ImageZone
ImageUtils --> ImageData

ACP --> Patch
ACP --> PatchSet

Thresholding --> Patch

Evaluation --> ImageData

@enduml

