@startuml
left to right direction
'### Classes principales ###
class ACP {
    {static} + __computeACP(V: List<double[]>__) : ACPResult
    {static} + __MoyCov(V: List<double[]>__) : MoyCovResult
    {static} + __project(U: double[][], Vc: List<double[]>__) : double[][]
}

class Evaluation {
    {static} + __mse(original: BufferedImage, denoised: BufferedImage)__ : double
    {static} + __psnr(mse: double)__ : double
}

class ImageUtils {
    {static} + __noising(X0: BufferedImage, sigma: double)__ : BufferedImage
    {static} + __extractPatches(X: BufferedImage, s: int)__ : List<Patch>
    {static} + __reconstructPatches(patches: List<Patch>, height: int, width: int)__ : BufferedImage
    {static} + __decoupeImage(X: BufferedImage, W: int, n: int)__ : List<ImageZone>
    {static} + __VectorPatchs(patches: List<Patch>)__ : List<VectorWithPosition>
    {static} + __computeMSE(img1: BufferedImage, img2: BufferedImage)__ : double
    {static} + __computePSNR(mse: double)__ : double
}

class Maquette {
    - pathOriginal: String
    - pathNoisy : String
    - pathDenoised : String
    - imageBruitee: ImageView
    - imageDebruitee : ImageView
    - placeholderLabelBruitee: Label
    - placeholderLabelDebruitee: Label
    - patchs: int
    - sigma: int
    - bruiteeLabel: Label 
    - debruiteeLabel : Label 
    - metricsBox: Hbox
    + start(primaryStage: Stage): void
    - createParamGroup(labelText: String, control: Control): VBox
    - createParamGroup(labelText: String, slider: Slider, valueLabel: Label): VBox
    - createImageBoxImportable(defaultText: String, caption: String): VBox
    - createDynamicImageBoxNoised(defaultText: String, caption: String): VBox
    - createDynamicImageBoxDenoised(defaultText: String, caption: String): VBox
    - createMetricBox(value: double, label: String): VBox
    {static} + __main(args: String[])__ : void
}

class Patch {
    - data: double[]
    - positionX: int
    - positionY: int
    + Patch(data: double[], x: int, y: int)
    + toVector(): double[]
    {static} + __fromVector(v: double[], x: int, y: int)__ : Patch
}

class Tresholding {
    {static} + __seuilVisu(sigma: double, size: int)__ : double
    {static} + __seuilBayes(sigma: double, sigmaSignal: double)__ : double
    {static} + __estimateGlobalSigmaSignal(contributions: double[][], sigma: double)__ : double
    {static} + __soft(lambda: double, x: double)__ : double
    {static} + __hard(lambda: double, x: double)__ : double
    {static} + __appliquerSeuillage(contributions: double[][], lambda: double, isSoft: boolean)__ : double[][]
    {static} + __reconstructionsDepuisContributions(contributions: List<double[]>)__ : List<double[]>
}

'### Classes de stockage ###
class ACPResult {
    + moyenne: double
    + base: double[][]
    + valeurs: double[]
}

class ImageZone {
    - image: BufferedImage
    - x: int
    - y: int
    + getImage(): BufferedImage
    + getPosition(): int[]
}

class MoyCovResult {
    + moyenne: double[]
    + covariance: double[][]
    + Vc: List<double[]>
}

class VectorWithPosition {
    + vector : double[]
    + x: int
    + y: int
}

'### Classe Main ###
class Main {
    + mse: double
    + psnr: double
    + minMse: double
    + maxPsnr: double
    + amelioration: double
    + maxAmelioration: double
    {static} + __bruitage(path: String, sigma: int)__ : void
    {static} + debruitageGlobal(pathOriginal: String, pathNoisy: String,sigma: int, patchs: int,extractionType: String, seuillageMethod: String,seuilType: String) : void
    {static} + debruitageLocal(pathOriginal: String,pathNoisy: String,sigma: int,patchs: int,extractionType: String,seuillageMethod: String,seuilType: String) : void
    {static} + optimiserDebruitage(pathOriginal: String,pathNoisy: String,sigma: int,patchs: int): List<String>
    {static} + loadImage(path: String) : BufferedImage
    {static} + saveImage(img: BufferedImage, path: String): void
}

'### Relations ###
ACP --> ACPResult
ACP --> MoyCovResult
ImageUtils --> Patch
ImageUtils --> ImageZone
ImageUtils --> VectorWithPosition
Tresholding --> ACPResult
Main ..> ImageUtils
Main ..> ACP
Main ..> Tresholding
Main ..> Evaluation

@enduml
